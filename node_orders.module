<?php

/**
 * @file
 * Module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node_orders\Controller\Group;
use Drupal\node_orders\Controller\Payment;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CssCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\Entity\DateFormat;
use Drupal\node\Entity\Node;

/**
 * Node_orders_entity_presave.
 */
function node_orders_entity_presave(EntityInterface $node) {
  if (method_exists($node, 'getType') && $node->getType() == 'orders') {
    if (!$node->title->value || TRUE) {
      $usluga = ' --- ';
      if (is_object($node->field_orders_ref_activity->entity)) {
        $usluga = $node->field_orders_ref_activity->entity->title->value;
      }
      $time = strtotime($node->field_orders_date->value);
      $title = 'Заявка: ' . $usluga . ' / ' . format_date($time, 'long');
      $node->title->setValue($title);
    }
  }
}

/**
 * Node_orders_entity_view.
 */
function node_orders_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (method_exists($entity, 'getType') && $entity->getType() == 'orders') {
    $group = Group::groupCounter($entity);
    $entity->field_orders_group->setValue($group);
    $count = Group::ordersCalc($entity);
    $entity->field_orders_cost_raschet->setValue($count);
    $build['group_view'] = [
      '#markup' => '<span class="cost">Численность группы (все люди): </span>' . $group . ' чел.<br>',
    ];
    $build['orders_view'] = [
      '#markup' => '<span class="cost">Расчетная стоимость услуги: </span>' . number_format($count, 0, ",", " ") . ' руб.',
    ];
    $build['payments'] = Payment::view($entity);
    $status = $entity->field_orders_status->value;
    if ($status == 'zayvka' || $status == 'control' || $status == 'active') {
      $build['cost'] = \Drupal::formBuilder()->getForm('Drupal\node_orders\Form\CalcCost', $entity);
    }
    if ($status == 'control') {
      $build['hours'] = \Drupal::formBuilder()->getForm('Drupal\node_orders\Form\TeamHours', $entity);
    }
    $build['ordstatus'] = \Drupal::formBuilder()->getForm('Drupal\node_orders\Form\StatusChange', $entity);
    $build['sendemail'] = \Drupal::formBuilder()->getForm('Drupal\node_orders\Form\SendEmail', $entity);

    $entity->save(TRUE);
  }
}

/**
 * F ajaxModeDev.
 */
function node_orders_ajax(array &$form, $form_state) {
  $response = new AjaxResponse();
  $show = ['display' => 'block'];
  $hide = ['display' => 'none'];
  $orders_type = $form_state->getValue('field_orders_type');
  $orders_date = $form_state->getValue('field_orders_date');
  $date = $orders_date[0]['value']['date'];
  $start = strtotime($date);
  $end = strtotime($date) + 24 * 3600;
  $otvet = 'Заявки на: ' . format_date($start, 'custom', 'd-m-Y') . ":";
  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1);
  $query->condition('type', 'orders');
  $query->condition('field_orders_date', format_date($start, 'custom', 'Y-m-d'), '>');
  $query->condition('field_orders_date', format_date($end, 'custom', 'Y-m-d'), '<');
  $query->range(0, 10);
  $entity_ids = $query->execute();
  $orders = Node::loadMultiple($entity_ids);
  foreach ($orders as $key => $node) {
    $otvet .= "<br><a href='/node/$key'>{$node->title->value}</a>";
  }
  $response->addCommand(new HtmlCommand("#check-date", $otvet));

  if ($orders_type[0]['value'] == "turist") {
    $response->addCommand(new CssCommand('.form-item-field-orders-customer-0-target-id', $show));
  }
  else {
    $response->addCommand(new CssCommand('.form-item-field-orders-customer-0-target-id', $hide));
  }
  if ($orders_type[0]['value'] == "fizik" || $orders_type[0]['value'] == "jurik") {
    $response->addCommand(new CssCommand('.form-item-field-orders-name-0-value', $show));
  }
  else {
    $response->addCommand(new CssCommand('.form-item-field-orders-name-0-value', $hide));
  }

  return $response;
}

/**
 * Node_orders_form_alter.
 */
function node_orders_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_orders_form' || $form_id == 'node_orders_edit_form') {
    $form['field_orders_type']['widget']['#ajax'] = [
      'callback' => 'node_orders_ajax',
      'effect' => 'fade',
      'progress' => ['type' => 'throbber', 'message' => ""],
      'event' => 'change',
    ];

    $format = DateFormat::load('html_time')->getPattern();
    $form['field_orders_date']["#suffix"] = '<div id="check-date"></div>';
    $form['field_orders_date']['widget']['0']['value']['#date_increment'] = ':15';
    $form['field_orders_date']['widget']['0']['value']['#date_time_format'] = 'H:i';
  }
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-orders-page-1') {
    $form['#info']['filter-field_orders_date_value']['label'] = "<b>Дата оказания услуги:</b> от";
    $form["field_orders_date_value"]['#type'] = 'date';
    $form["field_orders_date_value_1"]['#type'] = 'date';
  }
}
